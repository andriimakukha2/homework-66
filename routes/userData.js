const express = require("express");
const { ObjectId } = require("mongodb");
const User = require("../models/User");

const router = express.Router();

// üìå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (insertOne)
router.post("/insertOne", async (req, res) => {
    try {
        const newUser = new User(req.body);
        const savedUser = await newUser.save();
        res.status(201).json(savedUser);
    } catch (error) {
        console.error("‚ùå Error inserting user:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (insertMany)
router.post("/insertMany", async (req, res) => {
    try {
        const result = await User.insertMany(req.body);
        res.status(201).json(result);
    } catch (error) {
        console.error("‚ùå Error inserting multiple users:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (updateOne)
router.put("/updateOne/:id", async (req, res) => {
    console.log(req.params.id);
    try {
        const { id } = req.params;
        const updateData = req.body;

        if (!ObjectId.isValid(id)) {
            return res.status(400).json({ message: "Invalid ID format" });
        }

        delete updateData._id; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—é _id

        const result = await User.updateOne({ email: id }, { $set: updateData });
        console.log(result);
        if (result.matchedCount === 0) {
            return res.status(404).json({ message: "User not found" });
        }

        res.json(result);
    } catch (error) {
        console.error("‚ùå Error updating user:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (updateMany)
router.put("/updateMany", async (req, res) => {
    try {
        const { filter, updateData } = req.body;

        if (!filter || !updateData) {
            return res.status(400).json({ message: "Filter and updateData are required" });
        }

        const result = await User.updateMany(filter, { $set: updateData });

        res.json(result);
    } catch (error) {
        console.error("‚ùå Error updating multiple users:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –ó–∞–º—ñ–Ω–∞ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (replaceOne)
router.put("/replaceOne/:id", async (req, res) => {
    try {
        const { id } = req.params;
        const newData = req.body;

        if (!ObjectId.isValid(id)) {
            return res.status(400).json({ message: "Invalid ID format" });
        }

        delete newData._id; // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∞–º –∑ _id

        const result = await User.replaceOne({ _id: new ObjectId(id) }, newData);

        if (result.matchedCount === 0) {
            return res.status(404).json({ message: "User not found" });
        }

        res.json(result);
    } catch (error) {
        console.error("‚ùå Error replacing user:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (deleteOne)
router.delete("/deleteOne/:id", async (req, res) => {
    try {
        const { id } = req.params;

        if (!ObjectId.isValid(id)) {
            return res.status(400).json({ message: "Invalid ID format" });
        }

        const result = await User.deleteOne({ _id: new ObjectId(id) });

        if (result.deletedCount === 0) {
            return res.status(404).json({ message: "User not found" });
        }

        res.json(result);
    } catch (error) {
        console.error("‚ùå Error deleting user:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (deleteMany)
router.delete("/deleteMany", async (req, res) => {
    try {
        const { filter } = req.body;

        if (!filter) {
            return res.status(400).json({ message: "Filter is required" });
        }

        const result = await User.deleteMany(filter);

        res.json(result);
    } catch (error) {
        console.error("‚ùå Error deleting multiple users:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ü—ñ—î—é (find)
router.get("/find", async (req, res) => {
    try {
        const filter = req.query || {};
        const projection = { name: 1, email: 1, age: 1, _id: 1 }; // –í–∏–±—ñ—Ä–∫–æ–≤—ñ –ø–æ–ª—è

        const users = await User.find(filter, projection);

        res.json(users);
    } catch (error) {
        console.error("‚ùå Error finding users:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫—É—Ä—Å–æ—Ä—ñ–≤ (Cursor Pagination)
router.get("/findWithCursor", async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 10;

        const cursor = User.find().skip((page - 1) * limit).limit(limit).cursor();
        const users = [];

        for await (const user of cursor) {
            users.push(user);
        }

        res.json(users);
    } catch (error) {
        console.error("‚ùå Error using cursor:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

// üìå –ê–≥—Ä–µ–≥–∞—Ü—ñ–π–Ω–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
router.get("/aggregate", async (req, res) => {
    try {
        const aggregationResult = await User.aggregate([
            { $group: { _id: null, averageAge: { $avg: "$age" }, userCount: { $sum: 1 } } }
        ]);

        res.json(aggregationResult);
    } catch (error) {
        console.error("‚ùå Error performing aggregation:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});

module.exports = { router };